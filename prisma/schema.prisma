// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  brandKits     BrandKit[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@index([emailVerified])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// Brand Kit Models
model BrandKit {
  id                 String         @id @default(cuid())
  userId             String
  productTitle       String
  productDescription String
  logoUrl            String?
  logoPreviewUrl     String?
  extractedFeatures  String[] // Array of features
  brandColors        String[] // Array of hex colors
  audience           String?
  productVibes       String?
  brandPersonality   String?
  status             BrandKitStatus @default(DRAFT)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productImages ProductImage[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ProductImage {
  id         String   @id @default(cuid())
  brandKitId String
  imageUrl   String
  previewUrl String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())

  brandKit BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)

  @@index([brandKitId])
  @@index([order])
}

enum BrandKitStatus {
  DRAFT
  PROCESSING
  COMPLETED
  ARCHIVED
}
